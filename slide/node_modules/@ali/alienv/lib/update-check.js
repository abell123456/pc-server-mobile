'use strict';

var http = require('http');
var pkg = require('../package.json');

/**
 * Check new version from npm server.
 * @param callback {Function}
 */
function check(callback) {
	var pkgUrl = pkg.publishConfig.registry + '/' + pkg.name;

	var req = http.get(pkgUrl, function (res) {
		var data = [] ;

		if (res.statusCode !== 200) {
			callback(new Error('response statusCode: '+ res.statusCode));
		} else {
    		res.on('data', function (chunk) {
    			data.push(chunk);
    		});

    		res.on('end', function () {
    			var err;

    			try {
    				data = JSON.parse(Buffer.concat(data).toString());
    			} catch (e) {
    				err = e;
    			}

    			if (err) {
    				callback(err);
    			} else {
    				callback(null, {
    					name: pkg.name,
    					latest: data['dist-tags']['latest'] || '0.0.0',
                        beta: data['dist-tags']['beta'] || '0.0.0',
    					current: pkg.version
    				});
    			}
    		});

    		res.on('error', function (err) {
    			callback(err);
    		});
        }
	});

    req.on('error', function (err) {
        callback(err);
    });

    req.setTimeout(3000, function () {
        req.abort();
    });
}

/**
 * Notify the version info.
 * @param name {string}
 * @param latest {string}
 * @param current {string}
 */
function notify(name, latest, current) {
    console.log('[!] Update available: %s (current: %s)', latest, current);
    console.log('[!] Run "tnpm install %s@%s" to update.', name, latest);
    console.log('');
    process.exit(1);
}

/**
 * Compare two version number.
 * @param current {string}
 * @param target {string}
 * @return {number}
 */
function compare(current, target) {
    current = current.split('.').map(function (value) {
        return parseInt(value, 10);
    });
    target = target.split('.').map(function (value) {
        return parseInt(value, 10);
    });

    var i = 0;
    var len = 3;

    for (; i < len; ++i) {
        if (current[i] < target[i]) {
            return -1;
        } else if (current[i] > target[i]) {
            return 1;
        }
    }

    return 0;
}

/**
 * Do version check.
 * @param callback {Function}
 */
module.exports = function (callback) {
    check(function (err, pkg) {
        if (!err) {
            if (compare(pkg.current, pkg.latest) === -1) { // current < latest
                notify(pkg.name, pkg.latest, pkg.current);
            } else if (compare(pkg.current, pkg.latest) === 1
                && compare(pkg.current, pkg.beta) === -1) { // latest < current < beta
                notify(pkg.name, pkg.beta, pkg.current);
            }
        }
        callback();
    });
};
