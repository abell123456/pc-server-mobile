'use strict';

var decode = require('ent/decode');
var marked = require('marked');
var path = require('path');

var PATTERN_CODE_BLOCK = /<pre><code\s+class="lang-(.*?)">([\s\S]*?)<\/code><\/pre>/img;

// Here lives the void creatures.
var space = {};

/**
 * Strip dependencies in JS.
 * @params data {string}
 * @return {Array}
 */
function parseJS(data) {
	var deps = [];

	data = data.replace(/(?:^|[^\.])\brequire\s*\(\s*(['"])([^'"]+?)\1\s*\)/g, function (all, quote, id) {
		deps.push(id);
		return all;
	});

	return [ deps, data ];
}

/**
 * Strip dependencies in CSS.
 * @params data {string}
 * @return {Array}
 */

function parseCSS(data) {
	var deps = [];

	data = data.replace(/@import\s+(['"])([^'"]+?)\1\s*;?/g, function (all, quote, id) {
		deps.push(id);
		return '';
	});

	return [ deps, data ];
}

/**
 * Create the void JS.
 * @param pathname {string}
 * @param required {Array}
 * @return {string}
 */
function summonJS(pathname, required) {
	var data = [
		'var modules = {'
	];

	required.forEach(function (id) {
		data.push('    "' + id + '" : ' + 'function () { return require("' + id + '") },');
	});

	data = data.concat([
		'};',
		'window.require = function (id) {',
		'    return (modules[id] || function () { return null })();',
		'};'
	]);

	space[pathname += '.js'] = data.join('\n');

    return pathname;
}

/**
 * Create the void CSS.
 * @param pathname {string}
 * @param required {Array}
 * @return {string}
 */
function summonCSS(pathname, required) {
	var data = [];

	required.forEach(function (id) {
		data.push('@import "' + id + '";');
	});

	space[pathname += '.css'] = data.join('\n');

    return pathname;
}

/**
 * Active the code blocks.
 * @param data {string}
 * @param pathname {string}
 * @return {Object}
 */
function raise(data, pathname) {
	var requiredJS = [];
	var requiredCSS = [];

	data = data.replace(PATTERN_CODE_BLOCK, function (all, lang, code) {
		code = decode(code);

		switch (lang) {
			case 'html':
				break;
			case 'javascript':
				var ret = parseJS(code);
				requiredJS = requiredJS.concat(ret[0]);
				code = '<script>(function () {' + ret[1] + '}());</script>';
				break;
			case 'css':
				var ret = parseCSS(code);
				requiredCSS = requiredCSS.concat(ret[0]);
				code = '<style>' + ret[1] + '</style>';
				break;
		}

		return code;
	});

    return {
        html: data,
        js: summonJS(pathname, requiredJS),
        css: summonCSS(pathname, requiredCSS)
    };
}

/**
 * Filter factory.
 * @param [config] {Object}
 * @return {Function}
 */
module.exports = function (config) {
	config = config || {};

	var magic = config.magic || false;
    var theme = config.theme;

	return function *(next) {
		var req = this.request;
		var res = this.response;
		var pathname = req.pathname;

        // Send the void creatures.
		if (space[pathname]) {
			res.status(200)
				.type(path.extname(pathname))
				.data(space[pathname]);
			return;
		}

		yield next;

		if (res.status() === 200 && res.is('md')) {
            var data = {
                html: marked(res.data().toString()),
                title: ''
            };

            if (magic) { // Make the page alive.
                data = raise(data.html, pathname);
            }

            var re = data.html.match(/<h1.*?>(.*?)<\/h1>/);

            if (re) { // Make H1 as page title.
                data.title = re[1];
            }

            var data = [
                '<!DOCTYPE html>',
                '<html>',
                '<head>',
                '<meta charset="utf-8" />',
                '<title>' + data.title + '</title>',
                theme ? '<link rel="stylesheet" href="' + theme + '" />' : '',
                data.css && '<link rel="stylesheet" href="' + data.css + '" />',
                data.js && '<script src="' + data.js + '"></script>',
                '</head>',
                '<body>',
                data.html,
                '</body>',
                '</html>'
            ].join('\n');

			res.type('html')
				.data(data);
		}
	};
};
