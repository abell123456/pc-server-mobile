var domain = require('domain');
var unicorn = require('@ali/tianma-unicorn');

module.exports = function (config) {
	config = config || {};

	return function (next, done) {
		var req = this.request,
			res = this.response,
			filter = unicorn({ source: 'loop://localhost/', mode: config.mode || 'dev' });
			
		// Construct the faked request.
		
		var request = function(url, callback) {
			var pathname = url.replace('loop://localhost', '');

			req.url(pathname + '?');
			
			next(function (err) {
				if (err) {
					callback({ status: 500 });
				} else {
					callback({
						status: res.status(),
						head: function (key) {
							return res.head(key)
						},
						body: function () {
							return res.data()
						}
					});
				}
			});
		};
		
		request.method = req.method();
		request.path = decodeURI(req.path);
		request.pathname = decodeURI(req.pathname);
		
		// Construct the faked response.
		
		var datum = [];
		
		var response = {
			status: function (code) {
				if (code) {
					res.status(code);
					return response;
				} else {
					return res.status();
				}
			},
			
			head: function (headers) {
				res.head(headers);
				return response;
			},
			
			clear: function () {
				datum = [];
				return response;
			},
			
			write: function (data) {
				datum.push(data);
				return response;
			}
		};
        
        // Create sandbox.
        var sandbox = domain.create();
        
        sandbox.on('error', done);
		
		// Let's GO!
		
		res.status(404);
        
        sandbox.run(function () {
    		filter({
    			request: request,
    			response: response,
    			base: req.base || '/'
    		}, function () {
    			res.data(datum);
    			done();
    		});
        });
	};
};